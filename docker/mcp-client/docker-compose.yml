services:
  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: mcp-mysql
    environment:
      MYSQL_ROOT_PASSWORD: mcproot123
      MYSQL_DATABASE: mcp
      MYSQL_USER: mcpuser
      MYSQL_PASSWORD: mcppass123
      TZ: Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mcp-network
    healthcheck:
      # 使用 CMD-SHELL 支持变量展开（注意双 $）
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -uroot -p$${MYSQL_ROOT_PASSWORD} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
    restart: unless-stopped

  # MCP Host（HTTP:8087）
  mcp-host:
    build:
      context: ./mcp-host
      dockerfile: Dockerfile
    container_name: mcp-host
    environment:
      # 一劳永逸：只读 /app/config/，彻底忽略 JAR 里的 application*.yml
      SPRING_CONFIG_LOCATION: optional:file:/app/config/

      # 下面这些保持你原有的（也会覆盖外部 yml 里的同名项）
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/mcp?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: mcpuser
      SPRING_DATASOURCE_PASSWORD: mcppass123
      TZ: Asia/Shanghai
    ports:
      - "8087:8087"
    volumes:
      # 将 docker/application-docker.yml 挂成容器内 /app/config/application.yml
      - ./docker/application-docker.yml:/app/config/application.yml:ro
    networks:
      - mcp-network
    depends_on:
      mysql:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sS --max-time 5 http://localhost:8087/actuator/health || curl -sS --max-time 5 http://localhost:8087/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MCP Client（REST:8086, 内部 gRPC:9090）
  mcp-client:
    build:
      context: ./mcp-client
      dockerfile: Dockerfile
    container_name: mcp-client
    environment:
      # 同样固定只读外部 /app/config/
      SPRING_CONFIG_LOCATION: optional:file:/app/config/

      # mcp-client 调用 mcp-host 的 HTTP（非 gRPC）
      MCP_HOST_URL: http://mcp-host:8087

      # 运行期需要的 HOME / 缓存 / PATH
      HOME: /home/mcpclient
      XDG_CACHE_HOME: /home/mcpclient/.cache
      TZ: Asia/Shanghai
    ports:
      - "8086:8086"
      # - "9090:9090"  # 仅当需要对外暴露 gRPC 时再放开
    volumes:
      # 将 docker/application-docker-client.yml 挂成容器内 /app/config/application.yml
      - ./docker/application-docker-client.yml:/app/config/application.yml:ro
      # 缓存卷（强烈建议，提升 uvx/npx 首次拉包速度）
      - mcpclient_cache:/home/mcpclient/.cache
      - mcpclient_npm:/home/mcpclient/.npm
    networks:
      - mcp-network
    depends_on:
      mcp-host:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sS --max-time 5 http://localhost:8086/actuator/health || curl -sS --max-time 5 http://localhost:8086/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MCP UI（Nginx:80 -> 宿主 3000）
  mcp-ui:
    build:
      context: ./mcp-ui
      dockerfile: Dockerfile
    container_name: mcp-ui
    ports:
      - "3000:80"
    volumes:
      - ./mcp-ui/mcp-ui-dist:/usr/share/nginx/html:ro
    networks:
      - mcp-network
    depends_on:
      mcp-client:
        condition: service_healthy
      mcp-host:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  mysql_data:
  mcpclient_cache:
  mcpclient_npm:

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
